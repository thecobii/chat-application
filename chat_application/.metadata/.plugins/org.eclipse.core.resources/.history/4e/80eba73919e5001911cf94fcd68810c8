package ch.diogopocas.chatapp.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import ch.diogopocas.chatapp.domain.User;
import ch.diogopocas.chatapp.service.UserService;
/**
 * 
 * @author diogo
 *
 *
 *Erlauben dass React auf das Backend zugreifen kann
 */
@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/users")
public class UserController {
	
    private UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }
	/**
	 * User Liste ausgeben
	 * @return
	 */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    public List<User> getAllUsers() {
        return userService.findAll();
    }
    
    /**
     * User erstellen
     * @param user
     * @return User (im Datenbank gespeichert)
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public User createUser(@Valid @RequestBody User user) {
        return userService.createUser(user);
    }
    
    /**
     * User mit ID l√∂schen
     * @param id
     */
    @DeleteMapping("/delete/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void deleteUser(@PathVariable("id") Long id) {
        userService.deleteUser(id);
    }
    
    /**
     * User aktualisieren, Name und Passwort werden angepasst
     * @param id
     * @param user
     * @return
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    public User putUser(@PathVariable("id") Long id, @Valid @RequestBody User user) {
        return userService.updateUser(id, user);
    }
}


